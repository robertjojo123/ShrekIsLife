local modem = peripheral.find("modem")

if not modem then
    error("No wired modem found! Ensure a wired modem is attached.", 0)
end

rednet.open(peripheral.getName(modem))

local fps = 10
local frameInterval = 1000 / fps  -- 100ms per frame
local frameIndex = 1

print("Scheduler is waiting for a redstone signal to start playback...")

-- **Wait for a redstone signal on any side**
while true do
    local hasSignal = false
    for _, side in ipairs({"top", "bottom", "left", "right", "front", "back"}) do
        if redstone.getInput(side) then
            hasSignal = true
            break
        end
    end

    if hasSignal then
        print("Redstone signal detected! Sending sync signal to players...")
        
        -- **Send the sync signal multiple times to ensure all players receive it**
        for i = 1, 5 do
            rednet.broadcast("sync")
            os.sleep(0.2)  -- Small delay to prevent dropped messages
        end
        
        print("Sync complete! Starting movie playback...")
        break
    end
    os.sleep(0.1)  -- Check every 100ms to reduce CPU usage
end

local nextFrameTime = os.epoch("utc")

while true do
    local currentTime = os.epoch("utc")
    local timeUntilNextFrame = nextFrameTime - currentTime

    if timeUntilNextFrame <= 0 then
        -- **Broadcast frame update to all 8 players**
        rednet.broadcast("frame " .. frameIndex)
        print("Sent frame:", frameIndex)

        frameIndex = frameIndex + 1
        if frameIndex > 48 then
            frameIndex = 1  -- Reset to frame 1 after reaching the last frame
        end

        nextFrameTime = nextFrameTime + frameInterval  -- Schedule next frame

        -- **Compensate for download/processing delays**
        if os.epoch("utc") > nextFrameTime + frameInterval then
            print("[Warning] Frame drift detected, resyncing...")
            nextFrameTime = os.epoch("utc") + frameInterval
        end
    else
        os.sleep(timeUntilNextFrame / 1000)  -- Convert ms to seconds
    end
end
