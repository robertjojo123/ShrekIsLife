local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")

if not modem then
    error("No wired modem found! Ensure a wired modem is attached.", 0)
end
if not monitor then
    error("Attach a monitor!", 0)
end

local modemName = peripheral.getName(modem)
if not rednet.isOpen(modemName) then
    rednet.open(modemName)
    print("[INFO] Rednet opened on modem: " .. modemName)
end

-- Ensure the computer has a label before proceeding
while not os.getComputerLabel() do
    print("[ERROR] This computer has no label! Set the label using:")
    print("    label set comp0")
    print("    label set comp1")
    print("    (Set one of: comp0 to comp7)")
    os.sleep(2)
end

-- Extract the section number from the label
local section = tonumber(os.getComputerLabel():match("%d"))

-- If the label was incorrectly set, show an error and stop
if section == nil or section < 0 or section > 7 then
    error("Invalid computer label! Must be 'comp0' to 'comp7'. Use 'label set compX'.", 0)
end

local fps = 10
local globalStartTime = nil
local partNumber = 1
local nextPreloadPart = partNumber + 1
local activeVideoPath = "/vid_" .. tostring(partNumber) .. "_s" .. tostring(section) .. ".nfv"
local nextVideoPath = "/vid_" .. tostring(nextPreloadPart) .. "_s" .. tostring(section) .. ".nfv"
local preloadedFrames = {}

-- UPDATED BASE URL
local baseURL = "https://raw.githubusercontent.com/robertjojo123/ShrekIsLife/refs/heads/main/vid_"

-- Wait for synchronization from the scheduler
print("Waiting for sync...")
local synced = false

while not synced do
    local sender, msg = rednet.receive(nil, 10)  -- 10-second timeout
    if msg == "sync" then
        globalStartTime = os.epoch("utc")
        print("[SYNC] Received sync from scheduler! Playback starts now.")
        synced = true
    else
        print("[WARNING] No sync received yet... Retrying.")
    end
end

os.sleep(0.5)  -- Small delay to ensure all computers sync properly
print("Synchronized! Starting playback...")

-- Function to split strings (for parsing .nfv files)
local function split(inputstr, sep)
    if not inputstr then return {} end
    sep = sep or "%s"
    local t = {}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        table.insert(t, str)
    end
    return t
end

-- Download and preload a video file in the background
local function preloadVideoPart(part, path)
    local fileURL = baseURL .. tostring(part) .. "_s" .. tostring(section) .. ".nfv"
    
    print("[Preloading] Downloading:", fileURL)
    local response = http.get(fileURL)
    if response then
        local file = fs.open(path, "w")
        if file then
            file.write(response.readAll())
            file.close()
            print("[Preloading] Successfully downloaded:", fileURL)
        else
            print("[Error] Failed to write file:", path)
        end
        response.close()
    else
        print("[Preloading] Failed to download:", fileURL)
        return false
    end
    return true
end

-- Load video frames into memory
local function loadVideoIntoMemory(path)
    preloadedFrames = {}
    if fs.exists(path) then
        local file = fs.open(path, "r")
        local videoData = file.readAll()
        file.close()

        local videoLines = split(videoData, "\n")
        table.remove(videoLines, 1)  -- Remove resolution header

        for i = 1, #videoLines do
            table.insert(preloadedFrames, videoLines[i])
        end
        return true
    else
        print("[Error] Video file not found:", path)
        return false
    end
end

-- Render the assigned section of the frame
local function drawFast(frameIndex)
    local width, height = monitor.getSize()
    local section_width = math.floor(width / 4)
    local section_height = math.floor(height / 2)

    local col = section % 4
    local row = math.floor(section / 4)

    local startX = (col * section_width) + 1
    local startY = (row * section_height) + 1

    if preloadedFrames[frameIndex] then
        term.setCursorPos(startX, startY)
        term.blit(preloadedFrames[frameIndex], preloadedFrames[frameIndex], preloadedFrames[frameIndex])
    end
end

-- Background preloader task
local function backgroundPreloader()
    while true do
        -- Start downloading the next video part 20 frames before the current part ends
        if (os.epoch("utc") % 48) == 28 then
            print("[Preloading] Downloading next part:", nextPreloadPart)
            preloadVideoPart(nextPreloadPart, nextVideoPath)
        end
        os.sleep(0.1) -- Prevent excessive CPU usage
    end
end

-- Main loop for frame playback
local function frameRenderer()
    while true do
        local sender, msg = rednet.receive()
        local cmd, frameIndex = msg:match("^(%S+) (%d+)$")

        if cmd == "frame" then
            frameIndex = tonumber(frameIndex)
            drawFast(frameIndex)

            -- When a video part ends, switch to the preloaded part
            if (frameIndex % 48) == 0 then  -- Each part now has 48 frames
                print("Finished part", partNumber, "- deleting and loading next part...")

                -- Delete the old video file only if it exists
                if fs.exists(activeVideoPath) then
                    fs.delete(activeVideoPath)
                    print("[Cleanup] Deleted old part:", activeVideoPath)
                else
                    print("[Warning] Tried to delete missing file:", activeVideoPath)
                end

                -- Switch to the preloaded part
                partNumber = nextPreloadPart
                nextPreloadPart = partNumber + 1
                activeVideoPath = "/vid_" .. tostring(partNumber) .. "_s" .. tostring(section) .. ".nfv"
                nextVideoPath = "/vid_" .. tostring(nextPreloadPart) .. "_s" .. tostring(section) .. ".nfv"

                -- Ensure the preloaded file is ready before proceeding
                if not loadVideoIntoMemory(activeVideoPath) then
                    print("[Error] Failed to load next video part! Stopping playback.")
                    break
                end
            end
        end
    end
end

-- Run rendering and preloading simultaneously
parallel.waitForAny(frameRenderer, backgroundPreloader)
